% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/path_algo.R
\name{path_algo}
\alias{path_algo}
\title{Path Algorithm for Regularization}
\usage{
path_algo(y, lambda_0, method)
}
\arguments{
\item{y}{A numeric vector representing the input signal.}

\item{lambda_0}{A numeric value specifying the initial lambda value. Defaults to \eqn{\max(y) \times 100}.}

\item{method}{A character string specifying the method. Must be \code{"tri"} (tri-diagonal) or \code{"general"}.
Defaults to \code{"tri"}.}
}
\value{
A list containing:
\describe{
\item{lambda_index}{A numeric vector of indices corresponding to lambda values.}
\item{lambda_values}{A numeric vector of lambda values at each iteration.}
\item{beta_values}{A list of vectors, each containing the beta solution for a lambda value.}
\item{knot_locations}{A list of vectors, each containing the knot locations for a lambda value.}
\item{loop}{An integer indicating the total number of iterations.}
}
}
\description{
This function implements a path-following algorithm for solving a regularization problem.
It iteratively finds the next lambda value, computes the solution, and tracks knot locations.
}
\examples{
# Example usage with dummy data
y <- c(1, 2, 3, 4)
result <- path_algo(y, lambda_0 = 100, method = "tri")
print(result)

}
